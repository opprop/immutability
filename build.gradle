/// Why doesn't this work on Travis under Java 7?
/// The same text does in Randoop's build.gradle file.
plugins {
    // Plugin that applies Google-Java-format to the Java files in the project.
    // https://github.com/sherter/google-java-format-gradle-plugin
    // id 'com.github.sherter.google-java-format' version '0.6'
}

apply plugin: 'java'

ext {
    assert JavaVersion.current() == JavaVersion.VERSION_1_8: "Set JAVA_HOME to JDK 8. Current version is ${JavaVersion.current()}"
    jsr308 = file(new File("..")).absolutePath
    cfPath = "${jsr308}/checker-framework"
    cfiPath = "${jsr308}/checker-framework-inference"
    afu = "${jsr308}/annotation-tools/annotation-file-utilities"
    picoPath = "${jsr308}/immutability"
}

println '==================================='
println '            PICO Checker           '
println '==================================='
println ''
println '-------------------------------'
println 'Important Environment Variables'
println '-------------------------------'
println 'JSR308: ' + jsr308
println 'CF:     ' + cfPath
println 'CFI:    ' + cfiPath
println 'picoPath:' + picoPath

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: "${cfPath}/checker/dist", include: "checker.jar")
    compile fileTree(dir: "${cfiPath}/dist", include: "checker-framework-inference.jar")
    // sat4j solver dependency
    compile 'org.ow2.sat4j:org.ow2.sat4j.core:2.3.6'
    compile 'org.ow2.sat4j:org.ow2.sat4j.maxsat:2.3.6'
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.30'

    // CF test lib dependency
    testCompile fileTree(dir: "${cfPath}/framework-test/build/libs", include: "framework-test-*.jar")
    testCompile 'junit:junit:4.13.2'
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }

        resources {
            srcDirs = ["src/main/java"]
            exclude "**/*.java"
        }
    }

    test {
        java {
            // TODO: we shouldn't need source level dependency on CFITest
            srcDirs = ["src/test/java", "${cfiPath}/tests/checkers/inference/test"]
        }
    }
}

compileJava {
    options.compilerArgs = [
            '-implicit:class',
            '-Awarns',
            '-Xmaxwarns', '10000',
    ]
}

afterEvaluate {
    // Create a task for each JUnit test class whose name is the same as the JUnit class name.
    sourceSets.test.allJava.filter { it.path.contains("${picoPath}/src/test/java") }.forEach { file ->
        String junitClassName = file.name.replaceAll(".java", "")
        String testName = junitClassName.replaceAll("Test", "")
        tasks.create(name: "${junitClassName}", type: Test) {
            description "Run ${testName} tests."
            include "**/${name}.class"
        }
    }

    // Configure JUnit tests
    tasks.withType(Test) {
        group 'Verification'

        systemProperties 'path.afu.scripts': "${afu}/scripts",
                'path.inference.script': "${cfiPath}/scripts/inference",
                JDK_JAR: "${cfPath}/checker/dist/jdk8.jar"

        environment "external_checker_classpath", "${picoPath}/build/classes/java/main:${picoPath}/build/resources/main"

        jvmArgs "-Xbootclasspath/p:${cfiPath}/dist/javac.jar"

        testLogging {
            // Always run the tests
            outputs.upToDateWhen { false }
            // The following prints out each time a test is passed.
            events "passed", "skipped", "failed", "standardOut", "standardError"

            // Show the found unexpected diagnostics and expected diagnostics not found.
            exceptionFormat "full"
            showExceptions true
            showCauses true
            showStackTraces true
            showStandardStreams true
        }

        // After each test, print a summary.
        afterSuite { desc, result ->
            if (desc.getClassName() != null) {
                long mils = result.getEndTime() - result.getStartTime()
                double seconds = mils / 1000.0

                println "Testsuite: ${desc.getClassName()}\n" +
                        "Tests run: ${result.testCount}, " +
                        "Failures: ${result.failedTestCount}, " +
                        "Skipped: ${result.skippedTestCount}, " +
                        "Time elapsed: ${seconds} sec\n"
            }
        }
    }
}

clean {
    delete "build",
        "testdata",
        "annotated",
        "default.jaif",
        fileTree("testinput") {include "**/*.class"}
}

// // Commented out because plugins section is commented out
// /* Configuration for formatting */
// googleJavaFormat {
//     // toolVersion '1.3'
//     options style: 'AOSP'
// }
// tasks.googleJavaFormat {
//     group 'Formatting'
//     description = "Reformat Java source code with Google-Java-format"
//     exclude 'testinput'
//     exclude 'testdata'
//     exclude 'annotated'
// }
// tasks.verifyGoogleJavaFormat {
//     group 'Formatting'
//     description = "Check Java source code is in Google-Java-format"
//     exclude 'testinput'
//     exclude 'testdata'
//     exclude 'annotated'
// }
